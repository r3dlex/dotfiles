"------------------------------------------------------------
"------------------------------------------------------------
"-- MY FUCKING VIMRC FULL OF AWESOMENESS AND RAINBOW VOMITS--
"-------------------------R3DLEX-----------------------------
"------------------------------------------------------------
"------------------------------------------------------------

if has('vim_starting')
  set nocompatible               " Be iMproved
endif

"Required
call plug#begin(expand('~/.vim/plugged'))

Plug 'tpope/vim-fugitive'
Plug 'junegunn/seoul256.vim'
Plug 'Lokaltog/vim-easymotion'
" non-GitHub repos
Plug 'rhysd/vim-clang-format'
Plug 'vim-scripts/a.vim'
Plug 'scrooloose/nerdcommenter' 
Plug 'Valloric/YouCompleteMe'
"'ggreer/the_silver_searcher' for checking instructions on how to install ag
Plug 'Raimondi/delimitMate'
Plug 'marijnh/tern_for_vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'dbakker/vim-projectroot'
Plug 'jalvesaq/Nvim-R'
Plug 'slashmili/alchemist.vim'

call plug#end()

"Sets font size
if has("gui_running")
  if has("gui_gtk2")
    set guifont=Inconsolata\ 12
  elseif has("gui_macvim")
    set guifont=Menlo\ Regular:h14
  elseif has("gui_win32")
    set guifont=Consolas:h11:cANSI
  endif
endif

"Required by neobundle
filetype plugin indent on

syntax enable
set background=dark
colo seoul256

"autocomplete
" Turn on the WiLd menu
set wildmenu

" Ignore compiled files
set wildignore=*.o,*~,*.pyc
if has("win16") || has("win32")
    set wildignore+=.git\*,.hg\*,.svn\*
else
    set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
endif

" Ignore case when searching
set ignorecase
" When searching try to be smart about cases 
set smartcase
" Highlight search results
set hlsearch
" Makes search act like search in modern browsers
set incsearch 

" Don't redraw while executing macros (good performance config)
set lazyredraw 

"last commands
set showcmd

" word-wrapping
" prevents vim from inserting a line break
set textwidth=0
set wrapmargin=0
set wrap nolist 
set formatoptions+=l

"backspacing auto indent, line breaks and insert
set backspace=indent,eol,start

"Tabs
set tabstop=2 shiftwidth=2 expandtab

"change some default behaviours
set autoindent
set nostartofline
set ruler
set number
set nu
set nocompatible

" Backup
set nobackup
set nowb
set noswapfile

if has('mouse')
    set mouse=a
endif

filetype plugin on
filetype indent on

autocmd FocusGained * let @z=@+

"Changes current directory automatically, excluding /tmp
autocmd BufEnter silent! * lcd %:p:h

" Return to last edit position when opening files (You want this!)
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

set laststatus=2
set tags=tags;/

"Clang-format configs for Google C++ style, which is the default
let g:clang_format#code_style = "google"
let g:clang_format#style_options = {
  \ "AllowShortBlocksOnASingleLine" : "false",
  \ "AllowShortLoopsOnASingleLine" : "false",
  \ "AllowShortIfStatementsOnASingleLine" :  "false",
  \ "AllowShortFunctionsOnASingleLine" : "false",
  \ "AccessModifierOffset" : -1,
  \ "AlwaysBreakTemplateDeclarations" : "true",
  \ "Standard" : "C++03"}
"clang-format call
let g:clang_format#command = "clang-format"

"------------------------------------------------------------
" Mappings 
"
" Useful mappings

"------------------------------------------------------------
" Mappings
"
" Fixing
set timeout ttimeout         " enable separate mapping and keycode timeouts
set timeoutlen=250           " mapping timeout 250ms  (adjust for preference)
set ttimeoutlen=20           " keycode timeout 20ms

" Useful mappings

"Maps the leader command for general usage. This one is useful for it is close
"to h, j, k, l
let mapleader = ';'

"NERDCommenter - Mapping C-t to comment in visual and normal modes. 
"C-t is usually mapped to tag stack but since it is unused... 
nmap <Leader>t <plug>NERDCommenterToggle
vmap <Leader>t <plug>NERDCommenterToggle

" Map Y to act like D and C, i.e. to yank until EOL, rather than act as yy,
" which is the default
map Y y$

" Map <C-L> (redraw screen) to also turn off search highlighting until the
" next search
nnoremap <C-L> :nohl<CR><C-L>

" Maps Ctrl+s to save
map <C-S> :w<CR>
map <Leader>w :w<CR>

" Maps Ctrl+W to close buffer
map <C-W> :bdelete<CR>

"Alternates .h to or from .cpp/.c
map <silent> <C-Tab> :A<CR>

" Leader v will paste from clipboard
"
map <Leader>v :read !xclip -o<CR>
vmap <Leader>v :read !xclip -o<CR>
map <Leader>v :read !xclip -o<CR>

" Leader c will copy to the clipboard
map <Leader>c :w !xclip<CR><CR>
"vmap <F7> "*y

"Mapping set paste / set nopaste
nnoremap <silent> <Leader>sp :set paste<CR>
nnoremap <silent> <Leader>snp :set nopaste<CR>

" Use CTRL-Q to do what CTRL-V used to do
noremap <C-Q>   	<C-V>

" Escape is light years away!
imap jk <Esc>
imap JK <Esc>

" easymotion 2-char search config
nmap <Leader>s <Plug>(easymotion-s2)
nmap <Leader>f <Plug>(easymotion-s)
" easymotion find
map  <Leader>/ <Plug>(easymotion-sn)
omap <Leader>/ <Plug>(easymotion-tn)
" enabling smartcase
let g:EasyMotion_smartcase = 1
" JK motions: Line motions (visible lines)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)

" Ctrl+i for clang-format indentation 
autocmd FileType c,cpp,objc nnoremap <buffer><C-h> :<C-u>ClangFormat<CR>
autocmd FileType c,cpp,objc vnoremap <buffer><C-h> :ClangFormat<CR>

"Fzf searcher
nnoremap <silent> <Leader>p    :ProjectRootExe Files<CR>
nnoremap <silent> <C-P>        :ProjectRootExe Files<CR>
nnoremap <silent> <leader>h    :ProjectRootExe History<CR>

"vim-projectroot automatic definition on buffer opening
function! <SID>AutoProjectRootCD()
  try
    if &ft != 'help'
      ProjectRootCD
    endif
  catch
    " Silently ignore invalid buffers
  endtry
endfunction
"autocmd BufEnter * call <SID>AutoProjectRootCD()

" :e PathToProject
nnoremap <expr> <Leader>ep ':edit '.projectroot#guess().'/'
" Update project root 
nnoremap <leader>dp :ProjectRootCD<cr>

" Clang complete 
" let g:clang_library_path = '/Users/afb/.vim/bundle/YouCompleteMe/third_party/ycmd'
" let g:clang_use_library=1
" let g:clang_user_options = "-std=c++11"
"nnoremap <Leader>q :call g:ClangUpdateQuickFix()<CR>

"Snip mate triggerring mapped to <C-J> instead of <Tab>
imap <C-J> <Plug>snipMateNextOrTrigger
smap <C-J> <Plug>snipMateNextOrTrigger

"Source edition
nnoremap <leader>ev :e ~/.vimrc<CR>
nnoremap <leader>sv :so ~/.vimrc<CR>

" Complete options (disable preview scratch window, longest removed to always
" show menu)
set completeopt=menu,menuone
" Limit popup menu height
set pumheight=10

"------------------------------------------------------------
" GUI options
set guioptions=

"Correct Bash syntax for all bash files
au BufNewFile,BufRead .bashrc*,.bash_exports,.bash_aliases,.bash_functions,.bash_exports,.bash_wine,bashrc,bash.bashrc,.bash_profile*,.bash_logout*,*.bash,*.ebuild call SetFileTypeSH("bash")

"Correct vim highlight for different files
au BufNewFile,BufRead .vimrc,.vimperatorrc set filetype=vim

"Vim 7.3 detects example.pc as filetype 'proc' but has no syntax highlighting for Pro C. Override it so that it highlights as C. 
au BufRead,BufNewFile *.pc set filetype=c
