"------------------------------------------------------------
"------------------------------------------------------------
"-- MY FUCKING VIMRC FULL OF AWESOMENESS AND RAINBOW VOMITS--
"-------------------------R3DLEX-----------------------------
"------------------------------------------------------------
"------------------------------------------------------------

if has('vim_starting')
  set nocompatible               " Be iMproved
endif

"Fixes a problem where the fzf window does not closes with escape
if has("nvim")
  autocmd! FileType fzf tnoremap <buffer> <esc> <c-c>
endif

"Required
call plug#begin(expand('~/.vim/plugged'))

Plug 'tpope/vim-fugitive'
Plug 'junegunn/seoul256.vim'
Plug 'Lokaltog/vim-easymotion'
Plug 'rhysd/vim-clang-format'
Plug 'vim-scripts/a.vim'
Plug 'scrooloose/nerdcommenter' 
Plug 'scrooloose/nerdtree'
Plug 'Valloric/YouCompleteMe', { 'do': './install.py --clang-completer --java-completer' }
Plug 'Raimondi/delimitMate'
Plug 'marijnh/tern_for_vim'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'dbakker/vim-projectroot'
Plug 'jalvesaq/Nvim-R'
Plug 'elixir-editors/vim-elixir'
Plug 'slashmili/alchemist.vim'
Plug 'fatih/vim-go'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-syntastic/syntastic'
Plug 'diepm/vim-rest-console'
Plug 'bfredl/nvim-ipy'
Plug 'lervag/vimtex'
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
" Gives the ability to process latex in markdown
" Depends on nodejs and yarn
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app & yarn install'  }
Plug 'junegunn/vim-easy-align'
" Plug
"
Plug 'google/yapf', { 'rtp': 'plugins/vim', 'for': 'python' }
Plug 'PProvost/vim-ps1'

call plug#end()

"Sets font size
if has("gui_running")
  "if has("gui_gtk2")
    "set guifont=Inconsolata\ 12
  "elseif has("gui_macvim")
    "set guifont=Menlo\ Regular:h14
  "elseif has("gui_win32")
    "set guifont=Consolas:h11:cANSI
  "endif

  "Maximized
  set lines 999 columns 999
endif

"Required by neobundle
filetype plugin indent on

syntax enable
set background=dark
colo seoul256

"autocomplete
" Turn on the WiLd menu
set wildmenu

" Ignore compiled files
set wildignore=*.o,*~,*.pyc
if has("win16") || has("win32")
    set wildignore+=.git\*,.hg\*,.svn\*
else
    set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
endif

" Ignore case when searching
set ignorecase
" When searching try to be smart about cases 
set smartcase
" Highlight search results
set hlsearch
" Makes search act like search in modern browsers
set incsearch 

" Don't redraw while executing macros (good performance config)
set lazyredraw 

"last commands
set showcmd

" word-wrapping
" prevents vim from inserting a line break
set textwidth=0
set wrapmargin=0
set wrap nolist 
set formatoptions+=l

"backspacing auto indent, line breaks and insert
set backspace=indent,eol,start

"Tabs
set tabstop=2 shiftwidth=2 expandtab

"change some default behaviours
set autoindent
set nostartofline
set ruler
set number
set nu
set nocompatible

" Backup
set nobackup
set nowb
set noswapfile

" Only stores buffers when making session
set sessionoptions=buffers

if has('mouse')
    set mouse=a
endif

filetype plugin on
filetype indent on

autocmd FocusGained * let @z=@+

"Changes current directory automatically, excluding /tmp
autocmd BufEnter silent! * lcd %:p:h

" Return to last edit position when opening files (You want this!)
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

set laststatus=2
set tags=tags;/

"Clang-format configs for Google C++ style, which is the default
let g:clang_format#code_style = "google"
let g:clang_format#style_options = {
  \ "AllowShortBlocksOnASingleLine" : "false",
  \ "AllowShortLoopsOnASingleLine" : "false",
  \ "AllowShortIfStatementsOnASingleLine" :  "false",
  \ "AllowShortFunctionsOnASingleLine" : "false",
  \ "AccessModifierOffset" : -1,
  \ "AlwaysBreakTemplateDeclarations" : "true",
  \ "Standard" : "C++11"}
"clang-format call
let g:clang_format#command = "clang-format"

"------------------------------------------------------------
" Mappings 
"
" Useful mappings

"------------------------------------------------------------
" Mappings
"
" Fixing
set timeout ttimeout         " enable separate mapping and keycode timeouts
set timeoutlen=250           " mapping timeout 250ms  (adjust for preference)
set ttimeoutlen=20           " keycode timeout 20ms

" Useful mappings

"to h, j, k, l
"Maps the leader command for general usage. This one is useful for it is close
let mapleader = ';'

"NERDCommenter - Mapping C-t to comment in visual and normal modes. 
"C-t is usually mapped to tag stack but since it is unused... 
nmap <Leader>t <plug>NERDCommenterToggle
vmap <Leader>t <plug>NERDCommenterToggle

" Map Y to act like D and C, i.e. to yank until EOL, rather than act as yy,
" which is the default
map Y y$

" Map <C-L> (redraw screen) to also turn off search highlighting until the
" next search
nnoremap <C-L> :nohl<CR><C-L>

" Maps Ctrl+s to save
map <C-S> :w<CR>
map <Leader>w :w<CR>

" Maps Leader+q to close buffer
map <Leader>q :bdelete<CR>
map <Leader>q :bdelete!<CR>
map <Leader>qq :q!<CR>

"Alternates .h to or from .cpp/.c
map <silent> <C-Tab> :A<CR>

" Clipboard copy and paste functions
" Leader c will copy and x will cut to the clipboard
vmap <Leader>c "+y
vmap <Leader>x "+c
" Leader v will paste from clipboard
noremap <Leader>v c<ESC>"+p
imap <Leader>v <ESC>"+pa

"Mapping set paste / set nopaste
nnoremap <silent> <Leader>sp :set paste<CR>
nnoremap <silent> <Leader>snp :set nopaste<CR>

" Use CTRL-Q to do what CTRL-V used to do
noremap <C-Q> <C-V>

" Escape is light years away!
imap jk <Esc>
imap JK <Esc>

" easymotion 2-char search config
nmap <Leader>s <Plug>(easymotion-s2)
nmap <Leader>f <Plug>(easymotion-s)
" easymotion find
map  <Leader>/ <Plug>(easymotion-sn)
omap <Leader>/ <Plug>(easymotion-tn)
" enabling smartcase
let g:EasyMotion_smartcase = 1
" JK motions: Line motions (visible lines)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)

" Moves lines with C-k and C-j
:nnoremap <C-k> <Up>ddp<Up>
:nnoremap <C-j> ddp

" Ctrl+i for clang-format indentation 
autocmd FileType c,cpp,objc nnoremap <buffer><C-h> :<C-u>ClangFormat<CR>
autocmd FileType c,cpp,objc vnoremap <buffer><C-h> :ClangFormat<CR>
nnoremap <leader><leader>f :ClangFormat<CR>

"Fzf searcher
nnoremap <silent> <Leader>p    :ProjectRootExe Files<CR>
" Only Git Files
nnoremap <silent> <Leader>b   :ProjectRootExe Buffers<CR>
nnoremap <silent> <Leader>g   :ProjectRootExe GFiles<CR>
nnoremap <silent> <Leader>l   :ProjectRootExe Lines<CR>
nnoremap <silent> <Leader>m   :ProjectRootExe Commits<CR>
nnoremap <silent> <C-P>        :ProjectRootExe Files<CR>
nnoremap <silent> <leader>h    :ProjectRootExe History<CR>

" [Tags] Command to generate tags file
let g:fzf_tags_command = 'ctags -R'

let g:fzf_prefer_tmux = 1
let g:fzf_buffers_jump = 1

" vim-projectroot automatic definition on buffer opening
function! <SID>AutoProjectRootCD()
  try
    if &ft != 'help'
      ProjectRootCD
    endif
  catch
    " Silently ignore invalid buffers
  endtry
endfunction

" Automatically enters the project root when opening a new buffer
autocmd BufEnter * call <SID>AutoProjectRootCD()

" :e PathToProject
nnoremap <expr> <Leader>ep ':edit '.projectroot#guess().'/'
" Update project root 
nnoremap <leader>dp :ProjectRootCD<cr>

" YouCompleteMe / Clang complete 
let g:clang_library_path = '~/.vim/plugged/YouCompleteMe/third_party/ycmd'
let g:clang_use_library=1

map <Leader>i :YcmCompleter FixIt<CR>
imap <C-Space> :YcmCompleter FixIt<CR>
nnoremap <C-Space> :YcmCompleter FixIt<CR>

let g:ycm_cache_omnifunc = 1
let g:ycm_semantic_triggers = { 'd': ['.', 're![a-zA-Z]'] }
let g:ycm_autoclose_preview_window_after_completion=1

"Snip mate triggerring mapped to <C-J> instead of <Tab>
imap <leader><m> <Plug>snipMateNextOrTrigger
smap <leader><m> <Plug>snipMateNextOrTrigger

"Source edition
"nnoremap <leader>ev :e ~/.vimrc<CR>
"nnoremap <leader>sv :so ~/.vimrc<CR>
nnoremap <leader>ev :e ~/AppData/Local/nvim/init.vim<CR>
nnoremap <leader>sv :so ~/AppData/Local/nvim/init.vim<CR>


"ipynb
autocmd Filetype ipynb nmap <silent><Leader>pp :VimpyterInsertPythonBlock<CR>
autocmd Filetype ipynb nmap <silent><Leader>jj :VimpyterStartJupyter<CR>
autocmd Filetype ipynb nmap <silent><Leader>nn :VimpyterStartNteract<CR>

"Nvim-R configuration
let R_in_buffer = 1
let R_tmux_split = 1

"Terminal mode

" Esc to leave terminal mode it
:tnoremap <Esc> <C-\><C-n>
:tnoremap jk <C-\><C-n>
:tnoremap JK  <C-\><C-n>

" Complete options (disable preview scratch window, longest removed to always
" show menu)
set completeopt=menu,menuone
" Limit popup menu height
set pumheight=10

"------------------------------------------------------------
" GUI options
set guioptions+=!a
set clipboard=unnamedplus

"Folding options
nnoremap <leader>zi :setlocal foldmethod=indent<CR>
nnoremap <leader>zs :setlocal foldmethod=syntax<CR>

"Correct Bash syntax for all bash files
au BufNewFile,BufRead .profile,.bash*,*.bash,*.ebuild call SetFileTypeSH("sh")

"Correct vim highlight for different files
au BufNewFile,BufRead .vimrc,.vimperatorrc set filetype=vim

"Vim 7.3 detects example.pc as filetype 'proc' but has no syntax highlighting for Pro C. Override it so that it highlights as C. 
au BufRead,BufNewFile *.pc set filetype=c

" Splits Configuration
set splitbelow
set splitright
:hi VertSplit ctermbg=None ctermfg=None gui=None cterm=None guifg=None guibg=None

" PS1 related configs
" Fixes PS1 indentation issues 
au BufRead,BufNewFile *.ps1 setlocal  cindent cinoptions& cinoptions+=+0 cinkeys-=0#

nnoremap <leader><leader>v :vsplit<CR>
nnoremap <leader><leader>h :split<CR>

" Nerd tree toggle
map <leader>n :NERDTreeToggle<CR>

" <F1> restores that 'shutdown session'
noremap <F1> :source ~/.vim/shutdown_session.vim<CR>
" manually save a session with <F2>
noremap <F2> :mksession! ~/.vim/manual_session.vim<cr>
" recall the manually saved session with <F3>
noremap <F3> :source ~/.vim/manual_session.vim<cr>

" Syntastic checkers
let g:syntastic_python_checkers = ['pylint']

" Python json.tool
noremap <leader>pj :%!python -m json.tool<cr>

"autocmd BufWritePre *.py 0,$!yapf
au BufNewFile,BufRead .bashrc*,bashrc,bash.bashrc,.bash_profile*,.bash_logout*,*.bash,*.ebuild call SetFileTypeSH("bash")

" Python add Bosch guard
function! BoschGuardInsert(maintainer_name, filename_with_extension)
  let l:template = "# =============================================================================\n
        \#  C O P Y R I G H T\n
        \# -----------------------------------------------------------------------------\n
        \#  Copyright (c) 2020 by Robert Bosch GmbH. All rights reserved.\n
        \#\n
        \#  This file is property of Robert Bosch GmbH. Any unauthorized copy, use or\n
        \#  distribution is an offensive act against international law and may be\n
        \#  prosecuted under federal law. Its content is company confidential.\n
        \# =============================================================================\n
        \# Filename: \tfilename_with_extension\n
        \# Author(s): \tmaintainer_name\n
        \# ----------------------------------------------------------------------------"

  let l:template = substitute(l:template, "filename_with_extension", a:filename_with_extension, "")
  let l:template = substitute(l:template, "maintainer_name", a:maintainer_name, "")

  put =l:template
endfunction

function! AddBoschGuard()
  let maintainer_name = "Andre Silva (CC-AD/ESW4)"
  let filename = expand("%:t")
  call BoschGuardInsert(maintainer_name, filename)
endfunction

noremap <leader>hg :call AddBoschGuard()<cr>

" Sets the title of the GUI to the cwd
set title

augroup dirchange
    autocmd!
    autocmd DirChanged * let &titlestring=v:event['cwd']
augroup END

" Fonts adjustments
let s:fontsize = 13
function! AdjustFontSize(amount)
  let s:fontsize = s:fontsize+a:amount
  :execute "GuiFont! Consolas:h" . s:fontsize
endfunction

noremap <C-ScrollWheelUp> :call AdjustFontSize(1)<CR>
noremap <C-ScrollWheelDown> :call AdjustFontSize(-1)<CR>
inoremap <C-ScrollWheelUp> <Esc>:call AdjustFontSize(1)<CR>a
inoremap <C-ScrollWheelDown> <Esc>:call AdjustFontSize(-1)<CR>a
noremap <kPlus> :call AdjustFontSize(1)<CR>
noremap <kMinus> :call AdjustFontSize(-1)<CR>
" In insert mode, pressing ctrl + numpad's+ increases the font
inoremap <C-kPlus> <Esc>:call AdjustFontSize(1)<CR>a
inoremap <C-kMinus> <Esc>:call AdjustFontSize(-1)<CR>a

" Align GitHub-flavored Markdown tables
au FileType markdown vmap <Leader><Bslash> :EasyAlign*<Bar><Enter>

" Automatically save the current session whenever vim is closed
autocmd VimLeave * mksession! ~/.vim/shutdown_session.vim
